{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":91720,"databundleVersionId":13345277,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:15.089887Z","iopub.execute_input":"2025-09-30T06:59:15.090447Z","iopub.status.idle":"2025-09-30T06:59:15.358356Z","shell.execute_reply.started":"2025-09-30T06:59:15.090419Z","shell.execute_reply":"2025-09-30T06:59:15.357870Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# =====================================\n# 1. Setup\n# =====================================\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Settings\npd.set_option('display.max_columns', None)\nsns.set(style=\"whitegrid\", palette=\"muted\", font_scale=1.1)\n\n#test  = pd.read_csv(\"/kaggle/input/playground-series-s5e8/test.csv\")\ndf = pd.read_csv(\"/kaggle/input/playground-series-s5e9/train.csv\")  \nprint(\"Shape of dataset:\", df.shape)\n\n# Quick look\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:15.359589Z","iopub.execute_input":"2025-09-30T06:59:15.359883Z","iopub.status.idle":"2025-09-30T06:59:17.220147Z","shell.execute_reply.started":"2025-09-30T06:59:15.359865Z","shell.execute_reply":"2025-09-30T06:59:17.219585Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# =====================================\n# 2. Basic Info & Data Quality\n# =====================================\ndf.info()\ndf.describe(include='all')\n\n# Missing values\nmissing = df.isnull().sum()\nmissing = missing[missing > 0].sort_values(ascending=False)\nif not missing.empty:\n    plt.figure(figsize=(10, 6))\n    missing.plot(kind='bar')\n    plt.title(\"Missing Values by Feature\")\n    plt.show()\nelse:\n    print(\"âœ… No missing values found.\")\n\n# Duplicates\nprint(\"Duplicate rows:\", df.duplicated().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:17.220825Z","iopub.execute_input":"2025-09-30T06:59:17.221021Z","iopub.status.idle":"2025-09-30T06:59:17.773767Z","shell.execute_reply.started":"2025-09-30T06:59:17.221005Z","shell.execute_reply":"2025-09-30T06:59:17.773138Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nprint(\"\\n--- Descriptive Statistics ---\")\nprint(df.describe().T)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:17.775318Z","iopub.execute_input":"2025-09-30T06:59:17.775534Z","iopub.status.idle":"2025-09-30T06:59:18.003388Z","shell.execute_reply.started":"2025-09-30T06:59:17.775516Z","shell.execute_reply":"2025-09-30T06:59:18.002616Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 3. Target Variable Analysis (Target: BeatsPerMinute)\n# ========================\ntarget = \"BeatsPerMinute\"\n\nplt.figure(figsize=(8,5))\nsns.histplot(df[target], kde=True, bins=30)\nplt.title(f\"Distribution of {target}\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:18.004215Z","iopub.execute_input":"2025-09-30T06:59:18.004508Z","iopub.status.idle":"2025-09-30T06:59:20.423639Z","shell.execute_reply.started":"2025-09-30T06:59:18.004480Z","shell.execute_reply":"2025-09-30T06:59:20.422911Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 4. Feature Distributions\n# ========================\nnum_features = df.select_dtypes(include=[np.number]).columns.tolist()\nnum_features.remove(\"id\") # remove id if present\n\n# Plot histograms for all numeric features\ndf[num_features].hist(bins=30, figsize=(15,12), layout=(4,3))\nplt.suptitle(\"Feature Distributions\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:20.424370Z","iopub.execute_input":"2025-09-30T06:59:20.424658Z","iopub.status.idle":"2025-09-30T06:59:22.521573Z","shell.execute_reply.started":"2025-09-30T06:59:20.424637Z","shell.execute_reply":"2025-09-30T06:59:22.520837Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 5. Correlation Analysis\n# ========================\nplt.figure(figsize=(10,8))\nsns.heatmap(df[num_features].corr(), annot=True, fmt=\".2f\", cmap=\"coolwarm\")\nplt.title(\"Correlation Heatmap\")\nplt.show()\n\n# Correlation with target\nprint(\"\\n--- Correlation with Target ---\")\nprint(df.corr()[target].sort_values(ascending=False))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:22.522306Z","iopub.execute_input":"2025-09-30T06:59:22.522522Z","iopub.status.idle":"2025-09-30T06:59:23.380078Z","shell.execute_reply.started":"2025-09-30T06:59:22.522505Z","shell.execute_reply":"2025-09-30T06:59:23.379427Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 6. Feature vs Target Relationships\n# ========================\nfor col in num_features:\n    if col != target:\n        plt.figure(figsize=(6,4))\n        sns.scatterplot(x=df[col], y=df[target])\n        plt.title(f\"{col} vs {target}\")\n        plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:23.380775Z","iopub.execute_input":"2025-09-30T06:59:23.381002Z","iopub.status.idle":"2025-09-30T06:59:33.825589Z","shell.execute_reply.started":"2025-09-30T06:59:23.380977Z","shell.execute_reply":"2025-09-30T06:59:33.824793Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 7. Outlier Detection (Boxplots)\n# ========================\nfor col in num_features:\n    plt.figure(figsize=(6,4))\n    sns.boxplot(x=df[col])\n    plt.title(f\"Outliers in {col}\")\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:33.826422Z","iopub.execute_input":"2025-09-30T06:59:33.826654Z","iopub.status.idle":"2025-09-30T06:59:35.430170Z","shell.execute_reply.started":"2025-09-30T06:59:33.826636Z","shell.execute_reply":"2025-09-30T06:59:35.429508Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = ['RhythmScore', 'AudioLoudness', 'VocalContent', 'AcousticQuality']\n\nfor col in features:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5 * IQR\n    upper = Q3 + 1.5 * IQR\n    \n    # Winsorization (capping)\n    df[col] = np.where(df[col] < lower, lower,\n                       np.where(df[col] > upper, upper, df[col]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:35.432418Z","iopub.execute_input":"2025-09-30T06:59:35.432912Z","iopub.status.idle":"2025-09-30T06:59:35.518313Z","shell.execute_reply.started":"2025-09-30T06:59:35.432893Z","shell.execute_reply":"2025-09-30T06:59:35.517535Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 8. Feature Engineering Ideas\n# ========================\n# Example: Convert TrackDurationMs to minutes\ndf['TrackDurationMin'] = df['TrackDurationMs'] / 60000\ndf['Energy_Acoustic_Ratio'] = df['Energy'] / (df['AcousticQuality'] + 1e-5)\ndf['Vocal_Instrument_Balance'] = df['VocalContent'] / (df['InstrumentalScore'] + 1e-5)\ndf['MoodRhythm'] = df['MoodScore'] * df['RhythmScore']\ndf['PerformanceIntensity'] = df['LivePerformanceLikelihood'] * df['AudioLoudness']\ndf['RhythmEnergy'] = df['RhythmScore'] * df['Energy']\ndf['MoodAcoustic'] = df['MoodScore'] * df['AcousticQuality']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:35.519065Z","iopub.execute_input":"2025-09-30T06:59:35.519314Z","iopub.status.idle":"2025-09-30T06:59:35.545933Z","shell.execute_reply.started":"2025-09-30T06:59:35.519291Z","shell.execute_reply":"2025-09-30T06:59:35.545346Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 8. XGBoost Model\n# ========================\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom xgboost import XGBRegressor\nX = df.drop(columns=['id', target])\ny = df[target]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nparam_dist = {\n    'max_depth': [3, 7, 10],\n    'learning_rate': [0.01, 0.05, 0.1],\n    'n_estimators': [200, 500],\n    'subsample': [0.7, 1.0],\n    'colsample_bytree': [0.7, 1.0]\n}\n\nxgb = XGBRegressor(random_state=42)\n\nrandom_search = RandomizedSearchCV(\nestimator=xgb,\nparam_distributions=param_dist,\nn_iter=20,\nscoring='neg_mean_squared_error',\ncv=3,\nverbose=1,\nn_jobs=-1,\nrandom_state=42\n)\n\nrandom_search.fit(X_train, y_train)\n\nprint(\"Best parameters:\", random_search.best_params_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T06:59:35.546609Z","iopub.execute_input":"2025-09-30T06:59:35.546850Z","iopub.status.idle":"2025-09-30T07:06:03.691065Z","shell.execute_reply.started":"2025-09-30T06:59:35.546826Z","shell.execute_reply":"2025-09-30T07:06:03.690312Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 10. Evaluate Best Model\n# ========================\nbest_model = random_search.best_estimator_\ny_pred = best_model.predict(X_test)\n\nprint(\"RMSE:\", mean_squared_error(y_test, y_pred, squared=False))\nprint(\"RÂ² Score:\", r2_score(y_test, y_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T07:06:03.691599Z","iopub.execute_input":"2025-09-30T07:06:03.691800Z","iopub.status.idle":"2025-09-30T07:06:03.907953Z","shell.execute_reply.started":"2025-09-30T07:06:03.691783Z","shell.execute_reply":"2025-09-30T07:06:03.907359Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ========================\n# 11. Feature Importance\n# ========================\nplt.figure(figsize=(10,6))\nplt.barh(X.columns, best_model.feature_importances_)\nplt.title(\"XGBoost Feature Importance\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T07:06:03.908745Z","iopub.execute_input":"2025-09-30T07:06:03.908938Z","iopub.status.idle":"2025-09-30T07:06:04.177205Z","shell.execute_reply.started":"2025-09-30T07:06:03.908923Z","shell.execute_reply":"2025-09-30T07:06:04.176576Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# ========================\n# 1. Load Test Data\n# ========================\ntest_df = pd.read_csv(\"/kaggle/input/playground-series-s5e9/test.csv\")\n\n# ========================\n# 2. Apply Same Feature Engineering\n# ========================\ntest_df['TrackDurationMin'] = test_df['TrackDurationMs'] / 60000\ntest_df['Energy_Acoustic_Ratio'] = test_df['Energy'] / (test_df['AcousticQuality'] + 1e-5)\ntest_df['Vocal_Instrument_Balance'] = test_df['VocalContent'] / (test_df['InstrumentalScore'] + 1e-5)\ntest_df['MoodRhythm'] = test_df['MoodScore'] * test_df['RhythmScore']\ntest_df['PerformanceIntensity'] = test_df['LivePerformanceLikelihood'] * test_df['AudioLoudness']\ntest_df['RhythmEnergy'] = test_df['RhythmScore'] * test_df['Energy']\ntest_df['MoodAcoustic'] = test_df['MoodScore'] * test_df['AcousticQuality']\n\n# ========================\n# 3. Ensure Consistent Features\n# ========================\ntrain_features = best_model.get_booster().feature_names  # features used in training\n\nX_test_final = test_df[train_features]  # select only training features (drop id automatically)\n\n# ========================\n# 4. Predict with Best Model\n# ========================\ny_pred_test = best_model.predict(X_test_final)\n\n# ========================\n# 5. Save Predictions\n# ========================\noutput = pd.DataFrame({\n    \"id\": test_df[\"id\"],\n    \"Predicted_BPM\": y_pred_test\n})\n\noutput.to_csv(\"submission.csv\", index=False)\n\nprint(\"Predictions saved to test_predictions.csv\")\nprint(output.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T07:17:32.542853Z","iopub.execute_input":"2025-09-30T07:17:32.543632Z","iopub.status.idle":"2025-09-30T07:17:33.387692Z","shell.execute_reply.started":"2025-09-30T07:17:32.543597Z","shell.execute_reply":"2025-09-30T07:17:33.386912Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}